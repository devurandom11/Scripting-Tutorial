#!/usr/bin/env bash

u16le() {
	local n=$1 out
	# Convert n to 2 octets
	# ex: input = 0x1234
	# octet1: 0x12
	# octet2: 0x34
	local octet1=$(((n >> 8) & 0xFF))
	local octet2=$(((n >> 0) & 0xFF))

	printf -v out '\\x%02x\\x%02x' \
		"$octet2" \
		"$octet1"
	printf '%b' "$out"

}

u32le() {
	local n=$1 out
	# Convert n to 4 octets
	# ex: input = 0x12345678
	# octet1: 0x12
	# octet2: 0x34
	# octet3: 0x56
	# octet4: 0x78
	local octet1=$(((n >> 24) & 0xFF))
	local octet2=$(((n >> 16) & 0xFF))
	local octet3=$(((n >> 8) & 0xFF))
	local octet4=$(((n >> 0) & 0xFF))

	printf -v out '\\x%02x\\x%02x\\x%02x\\x%02x' \
		"$octet4" \
		"$octet3" \
		"$octet2" \
		"$octet1"
	printf '%b' "$out"

}

rgb() {
	local r=$1
	local g=$2
	local b=$3
	local out
	printf -v out '\\x%02x\\x%02x\\x%02x' \
		"$b" \
		"$g" \
		"$r"
	printf '%b' "$out"
}

bmp_header() {
	local height=$1
	local width=$2
	local bits_per_px=24
	local bytes_per_px=$((bits_per_px / 8))

	local row_size=$((width * bytes_per_px))

	# Align BMP to 4 byte boundary
	local padding=0
	while ((row_size % 4 != 0)); do
		((padding++))
		((row_size++))
	done

	local pixel_data_size=$((row_size * height))
	local pixel_data_offset=$((14 + 40))

	local file_size=$((pixel_data_size + pixel_data_offset))

	# Header (14 bytes)
	## Signature
	printf 'BM'

	## FileSize
	u32le "$file_size"

	## Reserved (=0)
	u32le 0

	## DataOffset
	u32le "$pixel_data_offset"

	# InfoHeader (40 bytes)

	## Size
	u32le 40

	## Width
	u32le "$width"

	## Height
	u32le "$height"

	## Planes
	u16le 1

	## BitCount
	u16le "$bits_per_px"

	## Compression
	u32le 0

	## ImageSize
	u32le 0

	## XPixelsPerM
	u32le 0

	## YPixelsPerM
	u32le 0

	## ColorsUsed
	u32le 0

	## ColorsImportant
	u32le 0

	REPLY=$padding
}

bmp_padding() {
	local padding=$1
	for ((i = 0; i < padding; i++)); do
		printf '\0'
	done
}
